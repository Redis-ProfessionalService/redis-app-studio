# The webRoot directory:
# the directory that the servlet engine regards as the place where applications 
# that use the servlet engine should be installed.  Generally, it is safe to leave
# this at the default setting of __AUTODETECT__.  When the SmartClient server is
# started, it logs a message to stdout telling you the autodetected path to your
# webRoot.  If this path is not your actual webRoot, then you'll want to override
# this config parameter here.
#
# Valid values: 
#
# 1. Absolute path to the webRoot directory
#
# 2. Special token:  __AUTODETECT__
#    When this token is used, SmartClient attempts to auto-detect the webRoot using
#    standard servlet APIs.  This may or may not work - depending on your
#    container type and deployment type.  For example, WAR/EAR deployments
#    on some containers never make it to disk, and so the container refuses
#    to provide the webRoot path.
#  
#    If SmartClient cannnot detect the webRoot, it sets the webRoot to
#    __USE_CONTAINER__ (see below).
#
# 3.  Special token: __USE_CONTAINER__
#     When this token is used, SmartClient uses standard servet APIs for accessing
#     filesystem resources.  This is slower than direct file access and, since
#     the servlet APIs provide no mechanism for writing to disk, means that some
#     development tools like the FileAssembler will not work.
#
webRoot: __AUTODETECT__

# if you've moved the isomorphic directory from its default location in webRoot,
# set the root-relative path to it here
#
# For example, if in your deployment the 'isomorphic' dir is in /foo/bar, then set
# then you'll need to set this to foo/bar/isomorphic
isomorphicPathRootRelative: isomorphic

# -------------- LOADING APP AND DATASOURCE DEFINITIONS --------------------

# Where the system looks for DataSource definition files ([dataSourceId].ds.xml or
# [dataSourceID].ds.js).  It's useful to put all your DataSources in one 
# directory since DataSources are frequently shared between applications.  
# "project.datasources" is also where the DataSource Importer tool looks 
# for available DataSources.
project.datasources: $webRoot/shared/ds
project.project: $webRoot/shared/ui
project.ui: $webRoot/shared/ui
project.apps: $webRoot/shared/app

# -------------- PICK DATABASE TO USE --------------------
#
# The SmartClient SDK ships with examples that use a database as the persistence
# layer.  By default, the SDK uses a built-in version of HSQLDB, but you can
# specify a different database to use here.

# which database do you want to use?  HSQLDB is enabled by default.
#sql.defaultDatabase: HSQLDB
#sql.HSQLDB.database.type: hsqldb
#sql.HSQLDB.interface.type: driverManager
#sql.HSQLDB.driver: org.hsqldb.jdbcDriver
#sql.HSQLDB.driver.url: jdbc:hsqldb:hsql://localhost/isomorphic

# If you want to use Mysql instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: Mysql

# If you want to use Oracle instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: Oracle

# If you want to use Postgres instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: PostgreSQL

# If you want to use DB2 instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: DB2

# -------------- Other settings --------------------
# The setting RPCManager.enabledBuiltinMethods enables or disables the BuiltInRPCs - RPC calls
# that are built into the SmartClient Server.  The setting below reflects the framework default
# of enabling only those RPCs that are typically needed in an application.
# 
# See the JavaDoc for com.isomorphic.rpc.BuiltinRPC and com.isomorphic.tools.BuiltinRPC for all
# available builtinRPCs and their behavior.
# 
# Note that many of the BuiltinRPCs are designed for use by tools such as Visual Builder, and
# provide services such as direct access to the file system (for load and save of screens) that
# would be unsafe to expose to untrusted users.
#
RPCManager.enabledBuiltinMethods: getPdfObject, getPdfObject, xmlToJS, uploadProgressCheck, exportClientData, downloadClientExport, exportImage
#
# --------------- Redis App Studio Settings ---------------
# These settings are specific for the Redis App Studio
# https://www.smartclient.com/smartclient/isomorphic/system/reference/?id=group..upload
#
fileUpload.maxSize: 509715200
fileUpload.maxFileSize: 254857600
DSRequest.maxUploadFileSize: 254857600
